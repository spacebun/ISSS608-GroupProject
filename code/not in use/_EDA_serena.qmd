---
title: "Exploratory Data Analysis"
subtitle: ""
date: February 05, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: false
    code-line-numbers: false
    
execute: 
  eval: true
  echo: true
  warning: false  

draft: true
---

## Getting Started

### Load libraries

```{r}
pacman::p_load(tidyverse, haven,
               ggrepel, ggthemes,
               ggridges, ggdist,
               patchwork, ggpattern,
               hrbrthemes, plotly,
               sf, tmap,
               lubridate,
               shiny)
```

### Import data

```{r}
pollutants <- read_csv("../../data/pollutants_singapore.csv", locale = locale(encoding = "ISO-8859-1"))
```

```{r}
weather <- read_csv("../../data/climate_historical_daily_records.csv") 
```

## Pollutants Dataset

### Pre-processing

```{r}
str(pollutants)
```

```{r}
# Convert date column from character to date type
pollutants <- pollutants %>%
  mutate(date = trimws(date), 
         date = as.Date(date, format="%Y/%m/%d"))
         
# Check that date column is now date type
str(pollutants)
```

```{r}
# Rename date column top 'Date'
pollutants <- pollutants %>% 
       rename("Date" = "date")
```

```{r}
# Filter data for 2014 - 2017 only 
# pollutants_2014_2017 <- pollutants %>%
#  filter(year(Date) >= 2014 & year(Date) <= 2017)
```

### Plots

```{r}
# Pollutants over time
# Reshape data to long format
pollutants_long <- pollutants %>%
  pivot_longer(cols = c(pm25, pm10, o3, no2, so2, co, psi), names_to = "pollutant", values_to = "value")

# Time series plot for all pollutants
ggplot(pollutants_long, aes(x = Date, y = value, color = pollutant)) +
  geom_line() +
  labs(title = "Pollutants over Time", x = "Date", y = "Concentration", color = "Pollutant") +
  theme_minimal()
```

```{r}
# Density plot for PM2.5 across Areas
ggplot(pollutants, aes(x = pm25, fill = Area)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of PM2.5 by Area", x = "PM2.5", y = "Density") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")

```

```{r}
# Filter for a specific year, e.g., 2020
pollutants_filtered <- pollutants %>%
  filter(year(Date) == 2020)

# Density plot for PM2.5 across Areas for the filtered year
ggplot(pollutants_filtered, aes(x = pm25, fill = Area)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of PM2.5 by Area for 2020", x = "PM2.5", y = "Density") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")


```

```{r}
# Define UI
ui <- fluidPage(
  titlePanel("Dynamic Density Plots of Selected Pollutants by Area"),
  radioButtons("granularity", "Select Granularity", choices = c("Year", "Month")),
  uiOutput("yearInput"),
  uiOutput("monthInput"),
  checkboxGroupInput("selectedAreas", "Select Areas", choices = unique(pollutants$Area)),
  checkboxGroupInput("selectedPollutants", "Select Pollutants", 
                     choices = c("PM2.5" = "pm25", "PM10" = "pm10", "O3" = "o3", 
                                 "NO2" = "no2", "SO2" = "so2", "CO" = "co"),
                     selected = c("pm25", "pm10", "o3", "no2", "so2", "co")),
  plotlyOutput("densityPlot")
)

# Define server logic
server <- function(input, output, session) {
  # Dynamic UI for year and month based on granularity selection
  output$yearInput <- renderUI({
    if(input$granularity == "Year") {
      selectInput("year", "Year", choices = unique(year(pollutants$Date)))
    } else {
      selectInput("yearMonth", "Year", choices = unique(year(pollutants$Date)))
    }
  })
  
  output$monthInput <- renderUI({
    if(input$granularity == "Month") {
      selectInput("month", "Month", choices = month.abb)
    }
  })

  output$densityPlot <- renderPlotly({
    # Filter data based on selected granularity, areas, and pollutants
    date_filtered <- if(input$granularity == "Year") {
      pollutants %>%
        filter(year(Date) == input$year)
    } else {
      pollutants %>%
        filter(year(Date) == input$yearMonth, month(Date) == match(input$month, month.abb))
    }
    
    pollutants_filtered <- date_filtered %>%
      filter(Area %in% input$selectedAreas) %>%
      pivot_longer(cols = input$selectedPollutants, names_to = "Pollutant", values_to = "Value")

    # Create the faceted plot for selected pollutants
    p <- ggplot(pollutants_filtered, aes(x = Value, fill = Area)) +
      geom_density(alpha = 0.5) +
      facet_wrap(~Pollutant, scales = "free") +
      labs(title = paste("Density Plots of Selected Pollutants by Area", 
                         if(input$granularity == "Year") { paste("for", input$year) } else { paste("for", input$month, input$yearMonth) }),
           x = "Concentration", y = "Density") +
      theme_minimal() +
      scale_fill_brewer(palette = "Set1", name = "Area")
    
    ggplotly(p)
  })
}

# Run the app
shinyApp(ui = ui, server = server)

```

```{r}
# Boxplot for PM2.5
ggplot(pollutants, aes(x = Area, y = pm25, fill = Area)) +
  geom_boxplot(alpha = 0.5) +
  labs(title = "Boxplot of PM2.5 by Area, 2014-2017", x = "Area", y = "PM2.5") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")
```

```{r}
# Define UI
ui <- fluidPage(
  titlePanel("Dynamic Boxplot of Selected Pollutants by Area"),
  radioButtons("granularity", "Select Granularity", choices = c("Year", "Month")),
  uiOutput("yearInput"),
  uiOutput("monthInput"),
  checkboxGroupInput("selectedAreas", "Select Areas", choices = unique(pollutants$Area)),
  checkboxGroupInput("selectedPollutants", "Select Pollutants", 
                     choices = c("PM2.5" = "pm25", "PM10" = "pm10", "O3" = "o3", 
                                 "NO2" = "no2", "SO2" = "so2", "CO" = "co"),
                     selected = "pm25"), # Default to PM2.5 or any other default
  plotlyOutput("boxPlot")
)

# Define server logic
server <- function(input, output, session) {
  # Dynamic UI for year and month based on granularity selection
  output$yearInput <- renderUI({
    if(input$granularity == "Year") {
      selectInput("year", "Year", choices = unique(year(pollutants$Date)))
    } else {
      selectInput("yearMonth", "Year", choices = unique(year(pollutants$Date)))
    }
  })
  
  output$monthInput <- renderUI({
    if(input$granularity == "Month") {
      selectInput("month", "Month", choices = month.abb)
    }
  })

  output$boxPlot <- renderPlotly({
    # Filter data based on selected granularity, areas, and pollutants
    date_filtered <- if(input$granularity == "Year") {
      pollutants %>%
        filter(year(Date) == input$year)
    } else {
      pollutants %>%
        filter(year(Date) == input$yearMonth, month(Date) == match(input$month, month.abb))
    }
    
    pollutants_filtered <- date_filtered %>%
      filter(Area %in% input$selectedAreas) %>%
      pivot_longer(cols = input$selectedPollutants, names_to = "Pollutant", values_to = "Value") %>%
      filter(Pollutant == input$selectedPollutants) # Ensure only selected pollutants are included

    # Create the boxplot for selected pollutants
    p <- ggplot(pollutants_filtered, aes(x = Area, y = Value, fill = Area)) +
      geom_boxplot(alpha = 0.5) +
      facet_wrap(~Pollutant, scales = "free_y") +
      labs(title = paste("Boxplot of Selected Pollutants by Area", 
                         if(input$granularity == "Year") { paste("for", input$year) } else { paste("for", input$month, input$yearMonth) }),
           x = "Area", y = "Concentration") +
      theme_minimal() +
      scale_fill_brewer(palette = "Set1", name = "Area")
    
    ggplotly(p)
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```

```{r}
# Density plot for PM10 across Areas
ggplot(pollutants_2014_2017, aes(x = pm10, fill = Area)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plot of PM10 by Area, 2014-2017", x = "PM10", y = "Density") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")
```

```{r}
# Boxplot for PM10
ggplot(pollutants_2014_2017, aes(x = Area, y = pm10, fill = Area)) +
  geom_boxplot(alpha = 0.5) +
  labs(title = "Boxplot of PM10 by Area, 2014-2017", x = "Area", y = "PM10") +
  theme_minimal() +
  scale_fill_discrete(name = "Area")
```

```{r}
# Correlation heatmap of how pollutants are correlated with others
```

## Weather

### Pre-processing

```{r}
str(weather)
```

```{r}
# Convert the character columns for rainfall and temperature to numeric
cols_to_convert <- c('Daily Rainfall Total (mm)', 'Highest 30 Min Rainfall (mm)', 
                     'Highest 60 Min Rainfall (mm)', 'Highest 120 Min Rainfall (mm)', 
                     'Mean Temperature (°C)', 'Maximum Temperature (°C)', 
                     'Minimum Temperature (°C)', 'Mean Wind Speed (km/h)', 
                     'Max Wind Speed (km/h)')

weather[cols_to_convert] <- lapply(weather[cols_to_convert], function(x) as.numeric(as.character(x)))

# Convert 'Year', 'Month', 'Day' to a Date object for plotting
weather <- weather %>%
  mutate(Date = as.Date(paste(Year, Month, Day, sep = "-")),
         `Mean Temperature (°C)` = as.numeric(`Mean Temperature (°C)`))

```

```{r}
# Create a new column in your weather dataframe to indicate whether there was rain on a particular day by checking if the Daily Rainfall Total (mm) is greater than zero. 
weather <- weather %>%
  mutate(`Rain Day` = `Daily Rainfall Total (mm)` > 0)
```

```{r}
str(weather)
```

```{r}
# Convert the data frame to an sf object using the latitude and longitude
# weather_sf <- st_as_sf(weather, coords = c("LONG", "LAT"), crs = 4326)
str(weather_sf)
```

```{r}
# Just view where are the weather stations 
# Set tmap mode to view
tmap_mode("view")

# Plot using tmap
tm_basemap <- tm_basemap(server = "OpenStreetMap") # Choose a basemap server
tm_shape(weather_sf) +
  tm_basemap +
  tm_dots(size = 0.1, col = "Area") +
  tm_layout(title = "Weather Stations in Singapore")
```

```{r}
str(weather_summary)
```

### Rainfall Plots

```{r}
# Assuming the weather data is stored in a variable called weather
# Filter data for a specific station, if desired
weather_station <- weather %>%
  filter(Station == "Paya Lebar")  # replace with your station of interest

ggplot(weather_station, aes(x = Date, y = `Daily Rainfall Total (mm)`)) +
  geom_line() +
  labs(title = "Daily Rainfall Total over Time",
       x = "Date", y = "Rainfall (mm)") +
  theme_minimal()
```

```{r}
# List of stations of interest
stations <- c("Sentosa Island", "Tuas", "Changi", "Admiralty")

# Filter the data for the specified stations and month (e.g., January)
weather_selected_stations <- weather %>%
  filter(Station %in% stations, Month == 1, !is.na(`Daily Rainfall Total (mm)`))

# Create the boxplot
ggplot(weather_selected_stations, aes(x = Station, y = `Daily Rainfall Total (mm)`, fill = Station)) +
  geom_boxplot() +
  labs(title = "Daily Rainfall Total in January across Stations",
       x = "Station", y = "Daily Rainfall Total (mm)") +
  scale_fill_brewer(palette = "Set1", name = "Station") +
  theme_minimal() +
  theme(legend.position = "none")  # Remove legend if not needed
```

```{r}
# List of stations of interest
stations <- c("Sentosa Island", "Tuas", "Changi", "Admiralty")

# Summarize the data to get the count of rain days per month for each station
monthly_rain_days <- weather %>%
  filter(Station %in% stations) %>%
  group_by(Station, Year, Month) %>%
  summarise(Rain_Days = sum(`Rain Day`, na.rm = TRUE)) %>%
  ungroup()

ggplot(monthly_rain_days, aes(x = factor(Month), y = Rain_Days, fill = Station)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_x_discrete(labels = month.abb) +  # Abbreviated month names
  labs(title = "Number of Rain Days per Month for Selected Stations",
       x = "Month", y = "Number of Rain Days") +
  theme_minimal() +
  scale_fill_brewer(palette = "Set1") +
  facet_wrap(~Station, ncol = 1)  # Separate plot for each station

```

#### Shiny

```{r}
# Shiny App for only temperature
# Define UI
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      .scrollable-menu {
        height: auto;
        max-height: 200px; /* Adjust the height as needed */
        overflow-x: hidden;
        overflow-y: auto;
      }
    "))
  ),
  titlePanel("Mean Temperature Density Plot by Station"),
  sidebarLayout(
    sidebarPanel(
      radioButtons("timeGranularity", "Select Time Granularity", choices = c("Year", "Month")),
      uiOutput("timeInput"),  # Dynamic UI for selecting Year/Month based on granularity
      # Wrap the checkbox group in a div with a custom class for styling
      tags$div(class = "scrollable-menu", 
        checkboxGroupInput("selectedStations", "Choose Stations", choices = unique(weather$Station))
      )
    ),
    mainPanel(
      plotlyOutput("densityPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  # Dynamically generate UI for Year/Month selection based on time granularity
  output$timeInput <- renderUI({
    if(input$timeGranularity == "Year") {
      selectInput("selectedYear", "Select Year", choices = unique(weather$Year))
    } else if(input$timeGranularity == "Month") {
      tagList(
        selectInput("selectedYear", "Select Year", choices = unique(weather$Year)),
        selectInput("selectedMonth", "Select Month", choices = month.abb, selected = "January")
      )
    }
  })
  
  output$densityPlot <- renderPlotly({
    # Handle data filtering based on selected time granularity
    if(input$timeGranularity == "Year") {
      filtered_data <- weather %>%
        filter(Station %in% input$selectedStations, Year == input$selectedYear)
    } else if(input$timeGranularity == "Month") {
      month_num <- match(input$selectedMonth, month.abb)
      filtered_data <- weather %>%
        filter(Station %in% input$selectedStations, Year == input$selectedYear, Month == month_num)
    }
    
    # Generate the density plot
    p <- ggplot(filtered_data, aes(x = `Mean Temperature (°C)`, fill = Station)) +
      geom_density(alpha = 0.5) +
      labs(title = paste("Density of Mean Temperature across Selected Stations"),
           x = "Mean Temperature (°C)", y = "Density") +
      scale_fill_brewer(palette = "Set1", name = "Station") +
      theme_minimal() +
      theme(legend.position = "bottom")
    
    ggplotly(p)
  })
}

# Run the application
shinyApp(ui = ui, server = server)
```

```{r}
# Shiny app to toggle between mean temperature, daily rainfall, wind speed
# Assuming 'weather' is your dataset

# Define UI
ui <- fluidPage(
  tags$head(
    tags$style(HTML("
      .scrollable-menu {
        height: auto;
        max-height: 200px; /* Adjust the height as needed */
        overflow-x: hidden;
        overflow-y: auto;
      }
    "))
  ),
  titlePanel("Weather Variable Density Plot by Station"),
  sidebarLayout(
    sidebarPanel(
      radioButtons("timeGranularity", "Select Time Granularity", choices = c("Year", "Month")),
      uiOutput("timeInput"),  # Dynamic UI for selecting Year/Month based on granularity
      tags$div(class = "scrollable-menu", 
        checkboxGroupInput("selectedStations", "Choose Stations", choices = unique(weather$Station))
      ),
      selectInput("selectedVariable", "Select Variable", 
            choices = c("`Mean Temperature (°C)`" = "Mean Temperature (°C)", 
                        "`Wind Speed (km/h)`" = "Mean Wind Speed (km/h)",
                        "`Daily Rainfall (mm)`" = "Daily Rainfall Total (mm)"))

    ),
    mainPanel(
      plotlyOutput("densityPlot")
    )
  )
)

# Define server logic
server <- function(input, output) {
  # Dynamically generate UI for Year/Month selection based on time granularity
  output$timeInput <- renderUI({
    if(input$timeGranularity == "Year") {
      selectInput("selectedYear", "Select Year", choices = unique(weather$Year))
    } else if(input$timeGranularity == "Month") {
      tagList(
        selectInput("selectedYear", "Select Year", choices = unique(weather$Year)),
        selectInput("selectedMonth", "Select Month", choices = month.abb, selected = "January")
      )
    }
  })
  
  output$densityPlot <- renderPlotly({
    # Filter data based on selected stations and time granularity
    data_filtered <- weather %>%
      filter(Station %in% input$selectedStations) %>%
      filter(!is.na(.data[[input$selectedVariable]]))  # Remove NA values for the selected variable
    
    if(input$timeGranularity == "Year") {
      data_filtered <- data_filtered %>%
        filter(Year == input$selectedYear)
    } else if(input$timeGranularity == "Month") {
      month_num <- match(input$selectedMonth, month.abb)
      data_filtered <- data_filtered %>%
        filter(Year == input$selectedYear, Month == month_num)
    }
    
    # Generate the density plot for the selected variable
    p <- ggplot(data_filtered, aes(x = !!sym(input$selectedVariable), fill = Station)) +
      geom_density(alpha = 0.5) +
      labs(title = paste("Density of", input$selectedVariable, "across Selected Stations"),
           x = input$selectedVariable, y = "Density") +
      scale_fill_brewer(palette = "Set1", name = "Station") +
      theme_minimal() +
      theme(legend.position = "bottom")
    
    ggplotly(p)
  })
}

# Run the application
shinyApp(ui = ui, server = server)

```

### Temperature Plots

```{r}

# Filter the data for the "Paya Lebar" station
weather_paya_lebar <- weather %>%
  filter(Station == "Paya Lebar", !is.na(`Mean Temperature (°C)`))  # Ensure to remove NA values

# Create the histogram plot
ggplot(weather_paya_lebar, aes(x = `Mean Temperature (°C)`)) +
  geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
  facet_wrap(~factor(Month, labels = month.abb), scales = "free_y") +
  labs(title = "Distribution of Mean Temperature by Month (Paya Lebar)",
       x = "Mean Temperature (°C)", y = "Frequency") +
  theme_minimal()

```

```{r}

# List of stations of interest
stations <- c("Sentosa Island", "Tuas", "Changi", "Admiralty")

# Filter the data for the specified stations and month (e.g., January)
weather_selected_stations <- weather %>%
  filter(Station %in% stations, Month == 1, !is.na(`Mean Temperature (°C)`))

# Create the density plot
ggplot(weather_selected_stations, aes(x = `Mean Temperature (°C)`, fill = Station)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density of Mean Temperature in January across Stations",
       x = "Mean Temperature (°C)", y = "Density") +
  scale_fill_brewer(palette = "Set1", name = "Station") +
  theme_minimal() +
  theme(legend.position = "bottom")  # Adjust legend position as needed


```

```{r}
#| fig-width: 12
ggplot(weather, aes(x = factor(Month), y = `Maximum Temperature (°C)`)) +
  geom_boxplot() +
  labs(title = "Maximum Temperature by Month",
       x = "Month", y = "Temperature (°C)") +
  theme_minimal()

```

### Wind

```{r}
ggplot(weather, aes(x = `Mean Wind Speed (km/h)`)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Distribution of Mean Wind Speeds",
       x = "Wind Speed (km/h)", y = "Frequency") +
  theme_minimal()
```

## Weather and Air Pollution

read in weather data with Area

```{r}
weather <- read_csv("../../data/weather_singapore_2014_to_2017.csv", locale = locale(encoding = "ISO-8859-1"))
# Convert the character columns for rainfall and temperature to numeric
cols_to_convert <- c('Daily Rainfall Total (mm)', 'Highest 30 Min Rainfall (mm)', 
                     'Highest 60 Min Rainfall (mm)', 'Highest 120 Min Rainfall (mm)', 
                     'Mean Temperature (°C)', 'Maximum Temperature (°C)', 
                     'Minimum Temperature (°C)', 'Mean Wind Speed (km/h)', 
                     'Max Wind Speed (km/h)')

weather[cols_to_convert] <- lapply(weather[cols_to_convert], function(x) as.numeric(as.character(x)))

# Convert 'Year', 'Month', 'Day' to a Date object for plotting
weather <- weather %>%
  mutate(Date = as.Date(paste(Year, Month, Day, sep = "-")),
         `Mean Temperature (°C)` = as.numeric(`Mean Temperature (°C)`))
```

```{r}
# Merge the datasets on Area and Date
combined_data <- merge(pollutants, weather, by = c("Area", "Date"))

```

```{r}
# Create scatter plots for each Area
gg <- ggplot(combined_data, aes(x = pm25, y = combined_data$`Daily Rainfall Total (mm)`)) +
  geom_point(alpha = 0.5) +  # Use alpha to make points semi-transparent
  facet_wrap(~Area) +  # Creates a separate plot for each Area
  labs(title = 'Relationship between PM2.5 and Daily Rainfall Total',
       x = 'PM2.5 (µg/m³)', 
       y = 'Mean Temperature (°C)') +
  coord_cartesian(xlim=c(0,500),
                  ylim=c(15,40))

# Print the plot
print(gg)
```

```{r}
# Create a new column in your weather dataframe to indicate whether there was rain on a particular day by checking if the Daily Rainfall Total (mm) is greater than zero. 
combined_data <- combined_data %>%
  mutate(`Rain Day` = `Daily Rainfall Total (mm)` > 0)
```

```{r}
# Load necessary libraries
library(corrplot)

# Assuming 'combined_data' is your dataset and it's already been loaded into your R environment
# Compute the correlation matrix for some of the variables
variables <- c("pm25", "pm10", "o3", "no2", "so2", "co")
corr_matrix <- cor(combined_data[, variables], use = "complete.obs")  # using 'complete.obs' to exclude NAs

# Visualize the correlation matrix
corrplot(corr_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45)

```

```{r}

# Filter data for January 2020 using the Date column
jan_2020_data <- combined_data %>%
  filter(Date >= as.Date("2017-01-01") & Date <= as.Date("2017-01-31"))

# Create the bubble plot for January 2020
ggplot(jan_2020_data, aes(x = `Daily Rainfall Total (mm)`, y = `Mean Temperature (°C)`, size = pm25)) +
  geom_point(alpha = 0.6) +  # Set transparency to see overlapping points
  scale_size_continuous(name = "PM2.5") +  # Set the name for the size scale (PM2.5 levels)
  labs(title = "Daily Rainfall vs. Mean Temperature in January 2017 (Bubble Size: PM2.5)",
       x = "Daily Rainfall Total (mm)",
       y = "Mean Temperature (°C)") +
  theme_minimal() +
  theme(legend.position = "right")  # Position the legend on the right

```

```{r}
# Scatter plot
ggplot(combined_data, aes(x = pm25, y = combined_data$`Mean Temperature (°C)`)) +
  geom_point(alpha = 0.5) +  # Use alpha to make points semi-transparent
  labs(title = 'Relationship between PM2.5 and Mean Temperature Total',
       x = 'PM2.5 (µg/m³)', 
       y = 'Mean Temperature (°C)') +
  coord_cartesian(xlim=c(0,500),
                  ylim=c(15,40))

```

```{r}
# Treemap

library(dplyr)
library(treemap)


# Group by 'Area' and 'Station', then calculate mean PM2.5 levels and mean temperature
data_summary <- combined_data %>%
  group_by(Area, Station) %>%
  summarise(Mean_PM25 = mean(pm25, na.rm = TRUE),  # Compute mean PM2.5, ignoring NA values
            Mean_Temperature = mean(`Mean Temperature (°C)`, na.rm = TRUE),  # Compute mean temperature
            .groups = 'drop')  # Ensure no additional grouping
# Create a hierarchical treemap
treemap(data_summary,
        index = c("Area", "Station"),  # Hierarchical grouping: Area then Station
        vSize = "Mean_PM25",  # Size of rectangles based on mean PM2.5 levels
        vColor = "Mean_Temperature",  # Color of rectangles based on mean temperature
        title = "PM2.5 Levels and Mean Temperature by Area and Station",
        fontsize.title = 14,
        palette = "RdYlGn",  # Color palette for temperature
        draw.labels = TRUE,  # To draw labels or not
        fontsize.labels = c(12, 8),  # Font sizes for Area and Station labels
        aspRatio = 0.5)  # Aspect ratio of the plot

```
