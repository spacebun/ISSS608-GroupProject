---
title: "Exploratory Data Analysis"
subtitle: "Weather"
date: February 25, 2024
date-modified:  last-modified
format:
  html:
    toc: true
    number-sections: false
    code-line-numbers: false
    
execute: 
  eval: true
  echo: true
  warning: false  

draft: true
---

## Overview

This exercise is a work in progress. So far it focuses mainly on cleaning the weather dataset.

## Getting Started

### Load libraries

First, we load packages required:

```{r}
pacman::p_load(naniar,
               tidyverse, haven,
               ggrepel, ggthemes,
               ggridges, ggdist,
               patchwork, ggpattern,
               hrbrthemes, plotly,
               sf, tmap,
               lubridate,
               DT)
```

## Weather

### Import data

```{r}
weather <- read_csv("../../data/climate_historical_daily_records.csv") 
```

## Check and clean the data

### Remove specific stations (remove rows)

Based on the Station Records, we will remove a number of stations where there is no data for a number of variables.

```{r}
# Define the station names to remove
stations_to_remove <- c("Macritchie Reservoir", "Lower Peirce Reservoir", "Pasir Ris (West)", "Kampong Bahru", "Jurong Pier", "Ulu Pandan", "Serangoon", "Jurong (East)", "Mandai", "Upper Thomson", "Buangkok", "Boon Lay (West)", "Bukit Panjang", "Kranji Reservoir", "Tanjong Pagar", "Admiralty West", "Queenstown", "Tanjong Katong", "Chai Chee", "Upper Peirce Reservoir", "Kent Ridge", "Somerset (Road)", "Punggol", "Tuas West", "Simei", "Toa Payoh", "Tuas", "Bukit Timah", "Yishun", "Buona Vista", "Pasir Ris (Central)", "Jurong (North)", "Choa Chu Kang (West)", "Serangoon North", "Lim Chu Kang", "Marine Parade", "Choa Chu Kang (Central)", "Dhoby Ghaut", "Nicoll Highway", "Botanic Garden", "Whampoa")

# Remove rows with the specified station names
weather <- weather[!weather$Station %in% stations_to_remove, ]

```

Checking stations. There should be 22 unique stations:

```{r}
# Extract unique stations from the weather dataframe
unique_stations <- unique(weather$Station)

# Print the list of unique stations
print(unique_stations)
```

### Check structure with glimpse()

```{r}
glimpse(weather)
```

### Remove specific columns (remove rows)

We will drop the following columns that we will not be using for this project:

-   `Highest 30 Min Rainfall (mm)`
-   `Highest 60 Min Rainfall (mm)`
-   `Highest 1200 Min Rainfall (mm)`

```{r}
weather <- weather %>%
  select(-c(`Highest 30 Min Rainfall (mm)`, 
            `Highest 60 Min Rainfall (mm)`, 
            `Highest 120 Min Rainfall (mm)`))
```

### Checking for duplicated rows

We expect that each row will be unique for combination of Station Name, Year, Month, and Day.

```{r}
# Check for duplicates across the combination of Station Name, Year, Month, and Day
duplicates <- weather[duplicated(weather[c("Station", "Year", "Month", "Day")]) | duplicated(weather[c("Station", "Year", "Month", "Day")], fromLast = TRUE), ]

# If 'duplicates' dataframe is empty, it means there are no duplicates
if (nrow(duplicates) == 0) {
  print("The combination of Station Name, Year, Month, and Day is unique.")
} else {
  print("There are duplicates in the combination of Station Name, Year, Month, and Day.")
}
```

### Checking for stations with no data for an entire month

For some stations, there is no data for an entire month. We will check and summarise this list of stations with missing months.

```{r}
# Create a reference dataframe with all combinations of stations, years, and months from 2014 to 2023
stations <- unique(weather$Station)
years <- 2014:2023
months <- 1:12

reference_df <- expand.grid(Station = stations, Year = years, Month = months)

# Left join the reference dataframe with the weather dataframe
merged_df <- merge(reference_df, weather, by = c("Station", "Year", "Month"), all.x = TRUE)

# Filter rows with missing data (NA values)
missing_months <- merged_df[is.na(merged_df$`Daily Rainfall Total (mm)`), c("Station", "Year", "Month")]

# If there are missing months, print the table
if (nrow(missing_months) > 0) {
  print("Stations with missing months entirely for the period of 2014 to 2023:")
  datatable(missing_months, 
            class= "compact",
            rownames = FALSE,
            width="100%", 
            options = list(pageLength = 40,scrollX=T))
} else {
  print("All stations have data for the period of 2014 to 2023.")
}
```

We will drop the data for stations that have at least one missing month.

```{r}
# List of station names to drop
stations_to_drop <- unique(missing_months$Station)

# Filter out rows with station names in the list
weather <- weather %>%
  filter(!Station %in% stations_to_drop)
```

### Checking rows for missing values

Missing values can be represented by "`\u0097`" or "NA".

#### Check for occurrence of "`\u0097`"

First we filter for Station Year Month where any of the variables have 7 or more occurences of "`\u0097`".

```{r}
# Function to count occurrences of "\u0097" values for each column within each station for each 'Year' and 'Month'
count_missing_values <- function(df) {
  # Group the data by Station, Year, and Month
  df_grouped <- df %>%
    group_by(Station, Year, Month) %>%
    summarise(across(-Day, ~ sum(. == "\u0097")))
  
  # Rename columns
  colnames(df_grouped)[-c(1:3)] <- paste("Number of", colnames(df_grouped)[-c(1:3)], "values")
  
  return(df_grouped)
}

# Call the function to count missing values
missing_values_summary <- count_missing_values(weather)

# # Filter rows with non-zero values
# missing_values_summary_filtered <- missing_values_summary %>%
#   filter(if_any(-c(1:3), ~ . != 0))

# Filter rows where any of the relevant columns have a value of 7 or more
missing_values_summary_filtered <- missing_values_summary %>%
  filter(if_any(-c(1:3), ~ . >= 7))

# Print the filtered summary
datatable(missing_values_summary_filtered, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 40,scrollX=T))
```

From our weather dataset we will remove the months of data for the stations that have at least 7 or more occurences of "`\u0097`".

```{r}
# Perform an anti-join to exclude rows that match criteria in missing_values_summary_filtered
weather <- anti_join(weather, missing_values_summary_filtered, by = c("Station", "Year", "Month"))
```

#### Check occurence of NA values

We will do the same for NA. If there are 7 or more occurences of NA in a month for a station we will drop that month of data.

```{r}
# Function to count occurrences of NA values for each column within each station for each 'Year' and 'Month'
count_na_values <- function(df) {
  # Group the data by Station, Year, and Month
  df_grouped <- df %>%
    group_by(Station, Year, Month) %>%
    summarise(across(-Day, ~ sum(is.na(.))))
  
  # Rename columns
  colnames(df_grouped)[-c(1:3)] <- paste("Number of", colnames(df_grouped)[-c(1:3)], "NA values")
  
  return(df_grouped)
}

# Call the function to count NA values
na_values_summary <- count_na_values(weather)

# # Filter rows with non-zero values
# na_values_summary_filtered <- na_values_summary %>%
#   filter(if_any(-c(1:3), ~ . != 0))

# Filter rows where any of the relevant columns have a value of 7 or more
na_values_summary_filtered <- na_values_summary %>%
  filter(if_any(-c(1:3), ~ . >= 7))

# Print the filtered summary
datatable(na_values_summary_filtered, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 40,scrollX=T))

```

```{r}
# Perform an anti-join to exclude rows that match criteria in missing_values_summary_filtered
weather <- anti_join(weather, na_values_summary_filtered, by = c("Station", "Year", "Month"))
```

### Drop stations with more than 1 month of data missing

Now that we have dropped months with more than 1 week of missing values, we will have to drop stations with missing months again.

Check stations to be dropped:

```{r}
# Create a reference dataframe with all combinations of stations, years, and months from 2014 to 2023
stations <- unique(weather$Station)
years <- 2014:2023
months <- 1:12

reference_df <- expand.grid(Station = stations, Year = years, Month = months)

# Left join the reference dataframe with the weather dataframe
merged_df <- merge(reference_df, weather, by = c("Station", "Year", "Month"), all.x = TRUE)

# Filter rows with missing data (NA values)
missing_months <- merged_df[is.na(merged_df$`Daily Rainfall Total (mm)`), c("Station", "Year", "Month")]

# If there are missing months, print the table
if (nrow(missing_months) > 0) {
  print("Stations with missing months entirely for the period of 2014 to 2023:")
  datatable(missing_months, 
            class= "compact",
            rownames = FALSE,
            width="100%", 
            options = list(pageLength = 40,scrollX=T))
} else {
  print("All stations have data for the period of 2014 to 2023.")
}
```

Drop stations:

```{r}
# List of station names to drop
stations_to_drop <- unique(missing_months$Station)

# Filter out rows with station names in the list
weather <- weather %>%
  filter(!Station %in% stations_to_drop)
```

## View data

```{r}
datatable(weather, 
          class= "compact",
          rownames = FALSE,
          width="100%", 
          options = list(pageLength = 40,scrollX=T))
```

### Categorising weather stations (Not done)

```{r}
#| eval: false
# Code block not executed
# Extract unique stations from the weather dataframe
unique_stations <- unique(weather$Station)

# Print the list of unique stations
print(unique_stations)
```

Next, we need to categorise these stations into different regions.

```{r}
#| eval: false
# Code block not executed

# # Define a function to classify stations into regions
# classify_region <- function(station_name) {
#   # Define regions based on your criteria
#   region_mapping <- list(
#     North = c("Seletar", "Sembawang"),
#     South = c("Marina Barrage", "Pasir Panjang"),
#     East = c("Changi", "Tai Seng", "East Coast Parkway", "Paya Lebar"),
#     West = c("Clementi", "Tuas South", "Tengah", "Jurong Island"),
#     Central = c("Ang Mo Kio")
#   )
#   
#   # Loop through regions to find the region of the station
#   for (region in names(region_mapping)) {
#     if (station_name %in% region_mapping[[region]]) {
#       return(region)
#     }
#   }
#   
#   # If station doesn't belong to any region, return NA
#   return(NA)
# }
# 
# # Add a new column 'Region' to the dataset
# weather$Region <- sapply(weather$Station, classify_region)
```
