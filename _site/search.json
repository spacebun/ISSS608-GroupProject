[
  {
    "objectID": "proposal/proposal.html",
    "href": "proposal/proposal.html",
    "title": "Proposal",
    "section": "",
    "text": "In Singapore, while there has been significant research on climate change, the relationship between changing weather patterns and air quality has not been thoroughly explored. While The National Environment Agency in Singapore has made historical weather and air quality data accessible, there remains a shortage of user-friendly tools to effectively visualize and analyze this data for a deeper understanding of its implications. Exploring these datasets within a visual analytics environment can provide valuable insights for various users, from policymakers to the general public."
  },
  {
    "objectID": "proposal/proposal.html#motivation",
    "href": "proposal/proposal.html#motivation",
    "title": "Proposal",
    "section": "",
    "text": "In Singapore, while there has been significant research on climate change, the relationship between changing weather patterns and air quality has not been thoroughly explored. While The National Environment Agency in Singapore has made historical weather and air quality data accessible, there remains a shortage of user-friendly tools to effectively visualize and analyze this data for a deeper understanding of its implications. Exploring these datasets within a visual analytics environment can provide valuable insights for various users, from policymakers to the general public."
  },
  {
    "objectID": "proposal/proposal.html#the-problems-addressed",
    "href": "proposal/proposal.html#the-problems-addressed",
    "title": "Proposal",
    "section": "The problems addressed",
    "text": "The problems addressed\nThere are some visualizations made available by the government for climate trends and air quality through websites like Weather.gov.sg and the Haze Information Portal. However, these tools have some limitations:\n\nThe current tools predominantly feature basic, static visualizations fixed to specific timeframes, such as choropleth maps or maps with callouts. They lack interactivity that can display the spatial and temporal nature of the data across different areas in Singapore.\nThere are no available tools with advanced analytical functions, such as anomaly detection, time series analysis, and future projection. Users are limited in observing trends in climate or air quality.\nMoreover, there is no integrated tool to explore, visualize and analyse the relationship between air pollutants and weather parameters (temperature, wind, and rainfall).\n\nThis project aims to overcome the identified problems by developing an intuitive and visual analytics tool that allows one to explore historical weather and air quality in Singapore."
  },
  {
    "objectID": "proposal/proposal.html#relevant-related-work",
    "href": "proposal/proposal.html#relevant-related-work",
    "title": "Proposal",
    "section": "Relevant related work",
    "text": "Relevant related work\nThis section will briefly discuss on some of relevant works that have already been done regarding weather and air quality.\n\nIn Haze Information Portal website managed by National Environment Agency (NEA), air quality in Singapore is displayed through Pollutant Standards Index (PSI) and PM 2.5 indicators. The visualization presents current air quality condition in an hourly and a 24-hour overview. Also, they have categorized air quality into different groups for users to easily understand the current conditions. However, while the platform allows users to display air quality in specified areas immediately, it limits them to conduct comparative analysis across different regions or scope into historical data trends. Furthermore, the platform lacks forecasting tools which could enhance users more insightful information.\n\n\n\nMeteorological Service Singapore website has a section to view historical daily weather record in Singapore. Users can select various regions and retrieve climate data from different months and years. The interactive map provides a geographical plot of the data for users to select the areas. However, it lacks time series visualization that would allow users to analyse weather trends over multiple years. Moreover, the platform also does not support comparative analysis between different area in which it would be useful for understanding climate variation across different areas within Singapore.\n\n\n\nWorld Weather map website provides an interactive global map that shows an information of various weather parameters, including temperature, precipitation, humidity, pressure, cloud, visibility, and wind. It also offers historical weather data for the past five days. This is a valuable resource for users to understand recent weather trends. However, the platform does not offer data specific to different areas in Singapore. Additionally, there is no forecast data and comparative analysis tools. Thus, it restricts users to anticipate future weather conditions or compare weather trends across different locations in Singapore."
  },
  {
    "objectID": "proposal/proposal.html#our-solution",
    "href": "proposal/proposal.html#our-solution",
    "title": "Proposal",
    "section": "Our solution",
    "text": "Our solution\nUsing various R packages, we will analyse and visualize weather and air quality across different areas in Singapore and build an interactive R Shiny application. Users will be able to:\n\nInteractively explore customizable and dynamic visualizations that display weather and air quality data over time and across different regions in Singapore.\nUse selected analytical functions to highlight key patterns, identify anomalies, and make projections about future climate and air quality.\nExplore and visualize the interrelationship between various air pollutants and weather parameters like temperature, wind speed, and rainfall."
  },
  {
    "objectID": "proposal/proposal.html#the-data",
    "href": "proposal/proposal.html#the-data",
    "title": "Proposal",
    "section": "The data",
    "text": "The data\nThe following datasets will be used:\n\n\n\n\n\n\n\n\n\nDataset\nFrequency\nPeriod\nSource\n\n\n\n\nClimate Historical Daily Records for various stations in Singapore\n(rainfall, temperature and wind speed)\nDaily\nPeriod varies across stations but approx. 2014 – 2023\nhttp://www.weather.gov.sg/climate-historical-daily/\n\n\nAir quality for 5 locations in Singapore\n(PM2.5, PM10, O3, NO2, SO2, CO, PSI)\nDaily\n2014 - 2023\nhttp://www.weather.gov.sg/climate-historical-daily/\n\n\nAir Temperature And Sunshine, Relative Humidity And Rainfall\n(Changi climate station)\nMonthly\nJan 1975 – Dec 2023\nM890081_monthly_temp&rain_197501-202312.csv\nhttps://tablebuilder.singstat.gov.sg/table/TS/M890081"
  },
  {
    "objectID": "proposal/proposal.html#approach-and-prototypes",
    "href": "proposal/proposal.html#approach-and-prototypes",
    "title": "Proposal",
    "section": "Approach and prototypes",
    "text": "Approach and prototypes\n\n1. Bird’s Eye View of Weather and Air Quality\nThis module will show dynamic, interactive map with option to include both weather and air quality data across 5 key areas in Singapore. Users will be able to select different time frames and regions for detailed examination.\nPrototype Features:\n\nTab 1: Map\n\nInteractive mapping tool with zoom and pan functions.\nLayer selection for various weather and air quality parameters.\nTime slider to view data across different historical periods.\nRegion-specific data display upon selection.\n\n\n\n\nTab 2: Plots\n\nOptions to select distribution plots for key weather parameters and pollutants by area, including density plots, histograms, and boxplots.\nComparative visualizations with side-by-side evaluations of multiple different areas or variables.\nCustomizable granularity to observe either monthly or yearly view of the data.\n\n\n\nFollowing R packages will be used in this section:\n\ntidyverse (CRAN - Package tidyverse (r-project.org)): An ecosystem of packages designed for data science that makes it easy to tidy, transform, and visualize data.\nggplot2 (CRAN - Package ggplot2 (r-project.org)): A powerful package for creating static, aesthetic, and informative graphics.\nplotly (CRAN - Package plotly (r-project.org)): Provides a high-level interface to Plotly, enabling the creation of interactive and dynamic visualizations.\nDT (CRAN - Package DT (r-project.org)): An interface to the JavaScript library DataTables, used to render interactive and rich data tables.\nsf (CRAN - Package sf (r-project.org)): An R package for handling and analyzing spatial data with simple features, which can interface with leaflet for mapping.\n\n\n\n2. Time-series Toolkit\nThis module enables users to forecast future climate conditions using historical data from 1975 to 2023. It offers interactive tools for model selection, prediction adjustments, and visualizes forecasts alongside historical data.\nPrototype Features:\n\nModel selection from a list of forecasting models (e.g., Linear Regression, ARIMA, Prophet) via checkbox\nFlexible selection for variables, period, forecast horizon and prediction parameters.\nDynamic Prediction Charts to Visualize past trends and future projections.\n\nFollowing R packages will be used in this section:\n\nLubridate (CRAN - Package lubridate (r-project.org)) : fast and user friendly parsing of date-time data, extraction and updating of components of a date-time\nTimetk (CRAN - Package timetk (r-project.org)) : Easy visualization, wrangling, and feature engineering of time series data for forecasting and machine learning prediction.\nModeltime (CRAN - Package modeltime (r-project.org)) : Time series forecasting framework with models including ARIMA, Exponential Smoothing, and additional time series models from the ‘forecast’ and ‘prophet’ packages\n\n\n\n\n3. Climate-Pollutant Relationship Explorer\nThis module would enable the user to select different types of plots and variables to be included in plots centered on exploring relationships. Below, we list some possible plots for such analysis:\n\nBubble Plot\nThis bubble plot, displaying the relationship between daily rainfall, mean temperature, and PM2.5 levels (represented by bubble size), provides a multidimensional view of the data. The plot allows a user to:\n\nassess if there are any trends between rainfall and temperature\nobserve how air quality varies with different weather conditions. For example, days with higher rainfall has smaller bubbles (lower PM2.5 levels) in the plot below, suggesting that rain could help reduce air pollution.\n\n\n\n\nTreemap\nThis treemap can convey both the PM2.5 pollution levels (through the size of the rectangles) and the mean temperature (through the color of the rectangles) across different areas and stations.\n\n\n\n\n\n\nWarning\n\n\n\nNote that only a small number of selected stations were grouped into different areas for this prototype"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About the team",
    "section": "",
    "text": "Coming soon~"
  },
  {
    "objectID": "code/Data_preparation_Weather.html",
    "href": "code/Data_preparation_Weather.html",
    "title": "Data Preparation",
    "section": "",
    "text": "In this document we clean and prepare our weather data.\n\nflowchart TD\n    A(Import Data) --&gt; B(Data preparation)\n    B --&gt; C(Save data)\n\n\n\n\nflowchart TD\n    A(Import Data) --&gt; B(Data preparation)\n    B --&gt; C(Save data)"
  },
  {
    "objectID": "code/Data_preparation_Weather.html#load-r-packages",
    "href": "code/Data_preparation_Weather.html#load-r-packages",
    "title": "Data Preparation",
    "section": "2.1 Load R packages",
    "text": "2.1 Load R packages\nFirst, we load packages required:\n\npacman::p_load(tidyverse, naniar, imputeTS, DT, knitr, lubridate)"
  },
  {
    "objectID": "code/Data_preparation_Weather.html#import-data",
    "href": "code/Data_preparation_Weather.html#import-data",
    "title": "Data Preparation",
    "section": "3.1 Import data",
    "text": "3.1 Import data\n\nraw_weather_data &lt;- read_csv(\"../data/climate_historical_daily_records.csv\")\n\nDetails of dataset:\n\n\n\n\n\n\n\n\n\nDataset\nDescription\nPeriod\nSource\n\n\n\n\nraw_weather_data\nClimate Historical Daily Records for 63 stations in Singapore\n2014-2023\nhttp://www.weather.gov.sg/climate-historical-daily/\n\n\n\nThis dataset was retrieved from the Meteorological Service Singapore site, and had some basic pre-processing steps performed in python due to the large amount of files:\n\nCombine all downloaded CSV files into one dataframe.\nPerforming cleaning to merge data of columns with slightly different names due to case sensitivity (e.g., “min” vs. “Min”)\n(‘Highest 30 Min Rainfall (mm)’, ‘Highest 30 min Rainfall (mm)’)\n(‘Highest 60 Min Rainfall (mm)’, ‘Highest 60 min Rainfall (mm)’)\n(‘Highest 120 Min Rainfall (mm)’, ‘Highest 120 min Rainfall (mm)’)\nAdd the latitude and longitude of each station to the dataframe."
  },
  {
    "objectID": "code/Data_preparation_Weather.html#check-structure-with-glimpse",
    "href": "code/Data_preparation_Weather.html#check-structure-with-glimpse",
    "title": "Data Preparation",
    "section": "3.2 Check structure with glimpse()",
    "text": "3.2 Check structure with glimpse()\n\nglimpse(raw_weather_data)\n\nRows: 202,976\nColumns: 15\n$ Station                         &lt;chr&gt; \"Paya Lebar\", \"Paya Lebar\", \"Paya Leba…\n$ Year                            &lt;dbl&gt; 2014, 2014, 2014, 2014, 2014, 2014, 20…\n$ Month                           &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ Day                             &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,…\n$ `Daily Rainfall Total (mm)`     &lt;chr&gt; \"0.0\", \"0.0\", \"2.2\", \"0.6\", \"10.5\", \"3…\n$ `Highest 30 Min Rainfall (mm)`  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\"…\n$ `Highest 60 Min Rainfall (mm)`  &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\"…\n$ `Highest 120 Min Rainfall (mm)` &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\"…\n$ `Mean Temperature (°C)`         &lt;chr&gt; \"\\u0097\", \"\\u0097\", \"\\u0097\", \"\\u0097\"…\n$ `Maximum Temperature (°C)`      &lt;chr&gt; \"29.5\", \"31.7\", \"31.1\", \"32.3\", \"27.0\"…\n$ `Minimum Temperature (°C)`      &lt;chr&gt; \"24.8\", \"25.0\", \"25.1\", \"23.7\", \"23.8\"…\n$ `Mean Wind Speed (km/h)`        &lt;chr&gt; \"15.8\", \"16.5\", \"14.9\", \"8.9\", \"11.9\",…\n$ `Max Wind Speed (km/h)`         &lt;chr&gt; \"35.3\", \"37.1\", \"33.5\", \"35.3\", \"33.5\"…\n$ LAT                             &lt;dbl&gt; 1.3524, 1.3524, 1.3524, 1.3524, 1.3524…\n$ LONG                            &lt;dbl&gt; 103.9007, 103.9007, 103.9007, 103.9007…\n\n\nThere are 202, 976 rows, and 15 columns in the dataset. In the next few steps, we will drop specific columns and rows based on the project focus."
  },
  {
    "objectID": "code/Data_preparation_Weather.html#filter-dataset-for-desired-period",
    "href": "code/Data_preparation_Weather.html#filter-dataset-for-desired-period",
    "title": "Data Preparation",
    "section": "3.3 Filter dataset for desired period",
    "text": "3.3 Filter dataset for desired period\nWhile the dataset contains 10 years of data from 2014 to 2023, we will focus on the most recent dataset for a 3 year period, from 2021 to 2023. This period was chosen to maximise the overall availability of data across the stations.\n\nraw_weather_data &lt;- raw_weather_data %&gt;%\n  filter(Year &gt;= 2021)\nprint(paste(\"The dataset covers the period from\", min(raw_weather_data$Year, na.rm = TRUE), \"to\", max(raw_weather_data$Year, na.rm = TRUE), \".\"))\n\n[1] \"The dataset covers the period from 2021 to 2023 .\""
  },
  {
    "objectID": "code/Data_preparation_Weather.html#drop-unused-columns",
    "href": "code/Data_preparation_Weather.html#drop-unused-columns",
    "title": "Data Preparation",
    "section": "3.4 Drop unused columns",
    "text": "3.4 Drop unused columns\nWe will not be using all 15 columns for this project. The following columns will be dropped:\n\nHighest 30 Min Rainfall (mm)\nHighest 60 Min Rainfall (mm)\nHighest 1200 Min Rainfall (mm)\nMean Wind Speed (km/h)\nMax Wind Speed (km/h)\n\n\n# Drop columns\nraw_weather_data &lt;- raw_weather_data %&gt;%\n  select(-c(`Highest 30 Min Rainfall (mm)`, \n            `Highest 60 Min Rainfall (mm)`, \n            `Highest 120 Min Rainfall (mm)`,\n            `Mean Wind Speed (km/h)`,\n            `Max Wind Speed (km/h)`))"
  },
  {
    "objectID": "code/Data_preparation_Weather.html#remove-rows-for-specific-stations",
    "href": "code/Data_preparation_Weather.html#remove-rows-for-specific-stations",
    "title": "Data Preparation",
    "section": "3.5 Remove rows for specific Stations",
    "text": "3.5 Remove rows for specific Stations\nThe Meteorological Service Singapore also provides a file, Station Records that has some information on the availability of data for each station. After examining the station records file, we found that 41 stations had missing information for some variables. We will hence drop rows for these stations.\n\n\nshow code\n# Drop rows of 41 stations\n# Define the station names to remove\nstations_to_remove &lt;- c(\"Macritchie Reservoir\", \"Lower Peirce Reservoir\", \"Pasir Ris (West)\", \"Kampong Bahru\", \"Jurong Pier\", \"Ulu Pandan\", \"Serangoon\", \"Jurong (East)\", \"Mandai\", \"Upper Thomson\", \"Buangkok\", \"Boon Lay (West)\", \"Bukit Panjang\", \"Kranji Reservoir\", \"Tanjong Pagar\", \"Admiralty West\", \"Queenstown\", \"Tanjong Katong\", \"Chai Chee\", \"Upper Peirce Reservoir\", \"Kent Ridge\", \"Somerset (Road)\", \"Punggol\", \"Tuas West\", \"Simei\", \"Toa Payoh\", \"Tuas\", \"Bukit Timah\", \"Yishun\", \"Buona Vista\", \"Pasir Ris (Central)\", \"Jurong (North)\", \"Choa Chu Kang (West)\", \"Serangoon North\", \"Lim Chu Kang\", \"Marine Parade\", \"Choa Chu Kang (Central)\", \"Dhoby Ghaut\", \"Nicoll Highway\", \"Botanic Garden\", \"Whampoa\")\n\n# Remove rows with the specified station names\nraw_weather_data &lt;- raw_weather_data[!raw_weather_data$Station %in% stations_to_remove, ]\n\n# Print the number of stations left\nprint(sprintf(\"There were %d stations removed.There are %d stations left.\", length(stations_to_remove), n_distinct(raw_weather_data$Station)))\n\n\n[1] \"There were 41 stations removed.There are 21 stations left.\""
  },
  {
    "objectID": "code/Data_preparation_Weather.html#check-for-duplicates",
    "href": "code/Data_preparation_Weather.html#check-for-duplicates",
    "title": "Data Preparation",
    "section": "3.6 Check for duplicates",
    "text": "3.6 Check for duplicates\n\n\nshow code\n# Identify duplicates\nduplicates &lt;- raw_weather_data[duplicated(raw_weather_data[c(\"Station\", \"Year\", \"Month\", \"Day\")]) | duplicated(raw_weather_data[c(\"Station\", \"Year\", \"Month\", \"Day\")], fromLast = TRUE), ]\n\n# Check if 'duplicates' dataframe is empty\nif (nrow(duplicates) == 0) {\n  print(\"The combination of Station Name, Year, Month, and Day is unique.\")\n} else {\n  print(\"There are duplicates in the combination of Station Name, Year, Month, and Day. Showing duplicated rows:\")\n  print(duplicates)\n}\n\n\n[1] \"The combination of Station Name, Year, Month, and Day is unique.\""
  },
  {
    "objectID": "code/Data_preparation_Weather.html#check-and-handle-missing-values",
    "href": "code/Data_preparation_Weather.html#check-and-handle-missing-values",
    "title": "Data Preparation",
    "section": "3.7 Check and handle missing values",
    "text": "3.7 Check and handle missing values\n\n3.7.1 First check for missing values\nMissing values in this dataset can be represented by:\n\n\\u0097\nNA\n-\n\nWe first replace these values with actual NA values:\n\nraw_weather_data &lt;- raw_weather_data %&gt;%\n  mutate(across(where(is.character), ~na_if(.x, \"\\u0097\"))) %&gt;%\n  mutate(across(where(is.character), ~na_if(.x, \"NA\"))) %&gt;%\n  mutate(across(where(is.character), ~na_if(.x, \"-\")))\n\nNext, we visualize the missing values in the dataset:\n\n\nshow code\nvis_miss(raw_weather_data)\n\n\n\n\n\n\n\n\n\nWe will take steps to handle the missing data.\n\n\n3.7.2 Remove Stations with significant missing data\nWe have identified two checks to make:\n\nCheck which stations have no recorded data for entire months.\nCheck which stations have more than 7 consecutive days of missing data\n\nFor both these checks, we will remove the entire station from the dataset as it would not be practical to impute such large amounts of missing values.\n\n3.7.2.1 Identify and remove Stations with no recorded data for entire months\nSome stations have no recorded data for entire months, as summarised in the table below:\n\n\nshow code\n# Create complete combination of Station, Year, and Month\nall_combinations &lt;- expand.grid(\n  Station = unique(raw_weather_data$Station),\n  Year = 2021:2023,\n  Month = 1:12\n)\n\n# Left join this with the original weather data to identify missing entries\nmissing_months &lt;- all_combinations %&gt;%\n  left_join(raw_weather_data, by = c(\"Station\", \"Year\", \"Month\")) %&gt;%\n  # Use is.na() to check for rows that didn't have a match in the original data\n  filter(is.na(Day)) %&gt;%\n  # Select only the relevant columns for the final output\n  select(Station, Year, Month)\n\n# Create a summary table that lists out the missing months\nmissing_months_summary &lt;- missing_months %&gt;%\n  group_by(Station, Year) %&gt;%\n  summarise(MissingMonths = toString(sort(unique(Month))), .groups = 'drop')\n\nkable(missing_months_summary)\n\n\n\n\n\nStation\nYear\nMissingMonths\n\n\n\n\nKhatib\n2022\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\n\nKhatib\n2023\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\n\n\n\n\nWe hence drop these stations from our dataset:\n\n\nshow code\nraw_weather_data &lt;- anti_join(raw_weather_data, missing_months, by = \"Station\")\n\nprint(sprintf(\"The folowing %d stations were dropped: %s\", n_distinct(missing_months$Station), paste(unique(missing_months$Station), collapse = \", \")))\n\n\n[1] \"The folowing 1 stations were dropped: Khatib\"\n\n\nshow code\nprint(sprintf(\"There are %d stations left: \", n_distinct(raw_weather_data$Station)))\n\n\n[1] \"There are 20 stations left: \"\n\n\nshow code\nkable(unique(raw_weather_data$Station),\n      row.names = TRUE,\n      col.names = \"Station\",\n      caption = \"List of Remaining Stations\")\n\n\n\nList of Remaining Stations\n\n\n\nStation\n\n\n\n\n1\nPaya Lebar\n\n\n2\nSemakau Island\n\n\n3\nAdmiralty\n\n\n4\nPulau Ubin\n\n\n5\nEast Coast Parkway\n\n\n6\nMarina Barrage\n\n\n7\nAng Mo Kio\n\n\n8\nNewton\n\n\n9\nTuas South\n\n\n10\nPasir Panjang\n\n\n11\nJurong Island\n\n\n12\nChoa Chu Kang (South)\n\n\n13\nTengah\n\n\n14\nChangi\n\n\n15\nSeletar\n\n\n16\nTai Seng\n\n\n17\nJurong (West)\n\n\n18\nClementi\n\n\n19\nSentosa Island\n\n\n20\nSembawang\n\n\n\n\n\n\n\n3.7.2.2 Identify and remove Stations with excessive missing values\nIf there are any missing values, we can try to impute these missing values. However, if there are 7 or more consecutive values missing, we will remove these stations first.\n\n\nshow code\n# Define a helper function to count the number of 7 or more consecutive NAs\ncount_seven_consecutive_NAs &lt;- function(x) {\n  na_runs &lt;- rle(is.na(x))\n  total_consecutive_NAs &lt;- sum(na_runs$lengths[na_runs$values & na_runs$lengths &gt;= 7])\n  return(total_consecutive_NAs)\n}\n\n# Apply the helper function to each relevant column within grouped data\nweather_summary &lt;- raw_weather_data %&gt;%\n  group_by(Station, Year, Month) %&gt;%\n  summarise(across(-Day, ~ count_seven_consecutive_NAs(.x), .names = \"count_consec_NAs_{.col}\"), .groups = \"drop\")\n\n# Filter to keep only rows where there is at least one column with 7 or more consecutive missing values\nweather_summary_with_consecutive_NAs &lt;- weather_summary %&gt;%\n  filter(if_any(starts_with(\"count_consec_NAs_\"), ~ . &gt; 0))\n\n# View the result\nprint(sprintf(\"There are %d stations with 7 or more consecutive missing values.\", n_distinct(weather_summary_with_consecutive_NAs$Station)))\n\n\n[1] \"There are 9 stations with 7 or more consecutive missing values.\"\n\n\nshow code\n# kable(weather_summary_with_consecutive_NAs)\ndatatable(weather_summary_with_consecutive_NAs, \n            class= \"compact\",\n            rownames = FALSE,\n            width=\"100%\", \n            options = list(pageLength = 10, scrollX=T),\n          caption = 'Details of stations with &gt;=7 missing values')\n\n\n\n\n\n\nWe hence drop these stations from our dataset:\n\n\nshow code\nraw_weather_data &lt;- anti_join(raw_weather_data, weather_summary_with_consecutive_NAs, by = \"Station\")\n\nprint(sprintf(\"The folowing %d stations were dropped: %s\", n_distinct(weather_summary_with_consecutive_NAs$Station), paste(unique(weather_summary_with_consecutive_NAs$Station), collapse = \", \")))\n\n\n[1] \"The folowing 9 stations were dropped: Admiralty, Clementi, Jurong Island, Marina Barrage, Paya Lebar, Semakau Island, Sembawang, Sentosa Island, Tengah\"\n\n\nshow code\nprint(sprintf(\"There are %d stations left: \", n_distinct(raw_weather_data$Station)))\n\n\n[1] \"There are 11 stations left: \"\n\n\nshow code\nkable(unique(raw_weather_data$Station),\n      row.names = TRUE,\n      col.names = \"Station\",\n      caption = \"List of Remaining Stations\")\n\n\n\nList of Remaining Stations\n\n\n\nStation\n\n\n\n\n1\nPulau Ubin\n\n\n2\nEast Coast Parkway\n\n\n3\nAng Mo Kio\n\n\n4\nNewton\n\n\n5\nTuas South\n\n\n6\nPasir Panjang\n\n\n7\nChoa Chu Kang (South)\n\n\n8\nChangi\n\n\n9\nSeletar\n\n\n10\nTai Seng\n\n\n11\nJurong (West)\n\n\n\n\n\n\n\n\n3.7.3 Second check for missing values\nFrom the check below we see there are still missing values in our data. We will impute these values in the next step.\n\n\nshow code\nvis_miss(raw_weather_data)\n\n\n\n\n\n\n\n\n\n\n\n3.7.4 Impute missing values\nTo handle the missing values for the remaining Stations, we will impute missing values using simple moving average from imputeTS package.\n\n3.7.4.1 Create Date column\n\nraw_weather_data &lt;- raw_weather_data %&gt;%\n  mutate(Date = as.Date(paste(Year, Month, Day, sep = \"-\"))) %&gt;%\n  relocate(Date, .after = 1)\n\n\n\n3.7.4.2 Using imputeTS package\n\n# Define the weather variables to loop through\nweather_variables &lt;- c(\"Daily Rainfall Total (mm)\", \"Mean Temperature (°C)\", \"Maximum Temperature (°C)\", \"Minimum Temperature (°C)\")\n\n# Ensure raw_weather_data is correctly copied to a new data frame for imputation\nweather_data_imputed &lt;- raw_weather_data\n\n# Loop through each weather variable to impute missing values\nfor(variable in weather_variables) {\n  # Convert variable to numeric, ensuring that the conversion warnings are handled if necessary\n  weather_data_imputed[[variable]] &lt;- as.numeric(as.character(weather_data_imputed[[variable]]))\n  \n  # Impute missing values using a moving average\n  weather_data_imputed &lt;- weather_data_imputed %&gt;%\n    group_by(Station) %&gt;%\n    arrange(Station, Date) %&gt;%\n    mutate(\"{variable}\" := round(na_ma(.data[[variable]], k = 7, weighting = \"simple\"), 1)) %&gt;%\n    ungroup()\n}\n\n\n\n\n3.7.5 Final visual check for missing values\n\n\nshow code\nvis_miss(weather_data_imputed)\n\n\n\n\n\n\n\n\n\n\n\n3.7.6 Add specific columns to data\nThese columns are added as they may be used in plots later.\n\nweather_data_imputed &lt;- weather_data_imputed %&gt;% \n  mutate(Date_mine = make_date(2023, month(Date), day(Date)),\n         Month_Name = factor(months(Date), levels = month.name),\n         Week = isoweek(Date),\n         Weekday = wday(Date)) %&gt;%\n  select(1:5, Date_mine, Month_Name, Week, Weekday, everything()) # Re-order columns"
  },
  {
    "objectID": "code/Data_preparation_Weather.html#sec-viewcleaneddataset",
    "href": "code/Data_preparation_Weather.html#sec-viewcleaneddataset",
    "title": "Data Preparation",
    "section": "3.8 Summary of cleaned data",
    "text": "3.8 Summary of cleaned data\n\n3.8.1 Details of stations and time period of data\n\n\nshow code\ntime_period_start &lt;- min(weather_data_imputed$Date)\ntime_period_end &lt;- max(weather_data_imputed$Date)\ncat(\"\\nThe time period of the dataset is from\", format(time_period_start, \"%Y-%m-%d\"),\"to\", format(time_period_end, \"%Y-%m-%d\"), \"\\n\")\n\n\n\nThe time period of the dataset is from 2021-01-01 to 2023-12-31 \n\n\nshow code\nprint(sprintf(\"There are %d stations: \", n_distinct(weather_data_imputed$Station)))\n\n\n[1] \"There are 11 stations: \"\n\n\nshow code\nkable(unique(weather_data_imputed$Station),\n      row.names = TRUE,\n      col.names = \"Station\",\n      caption = \"List of Stations\")\n\n\n\nList of Stations\n\n\n\nStation\n\n\n\n\n1\nAng Mo Kio\n\n\n2\nChangi\n\n\n3\nChoa Chu Kang (South)\n\n\n4\nEast Coast Parkway\n\n\n5\nJurong (West)\n\n\n6\nNewton\n\n\n7\nPasir Panjang\n\n\n8\nPulau Ubin\n\n\n9\nSeletar\n\n\n10\nTai Seng\n\n\n11\nTuas South\n\n\n\n\n\n\n\n3.8.2 Check structure with glimpse()\n\nglimpse(weather_data_imputed)\n\nRows: 12,045\nColumns: 15\n$ Station                     &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Date                        &lt;date&gt; 2021-01-01, 2021-01-02, 2021-01-03, 2021-…\n$ Year                        &lt;dbl&gt; 2021, 2021, 2021, 2021, 2021, 2021, 2021, …\n$ Month                       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Day                         &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\n$ Date_mine                   &lt;date&gt; 2023-01-01, 2023-01-02, 2023-01-03, 2023-…\n$ Month_Name                  &lt;fct&gt; January, January, January, January, Januar…\n$ Week                        &lt;dbl&gt; 53, 53, 53, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, …\n$ Weekday                     &lt;dbl&gt; 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, …\n$ `Daily Rainfall Total (mm)` &lt;dbl&gt; 94.4, 114.4, 5.2, 0.0, 0.0, 0.0, 1.6, 12.6…\n$ `Mean Temperature (°C)`     &lt;dbl&gt; 24.0, 23.0, 23.9, 25.1, 26.9, 26.9, 24.4, …\n$ `Maximum Temperature (°C)`  &lt;dbl&gt; 26.2, 24.5, 25.3, 27.9, 31.6, 30.3, 26.0, …\n$ `Minimum Temperature (°C)`  &lt;dbl&gt; 21.5, 21.6, 23.2, 23.1, 24.1, 25.1, 23.8, …\n$ LAT                         &lt;dbl&gt; 1.3764, 1.3764, 1.3764, 1.3764, 1.3764, 1.…\n$ LONG                        &lt;dbl&gt; 103.8492, 103.8492, 103.8492, 103.8492, 10…\n\n\n\n\n3.8.3 View dataset as interactive table\n\n\nshow code\ndatatable(weather_data_imputed, \n            class= \"compact\",\n            rownames = FALSE,\n            width=\"100%\", \n            options = list(pageLength = 10, scrollX=T),\n          caption = 'Cleaned and imputed weather dataset')"
  },
  {
    "objectID": "code/Data_preparation_Weather.html#save-cleaned-data-to-.rds",
    "href": "code/Data_preparation_Weather.html#save-cleaned-data-to-.rds",
    "title": "Data Preparation",
    "section": "3.9 Save cleaned data to .rds",
    "text": "3.9 Save cleaned data to .rds\n\nwrite_rds(weather_data_imputed, \"../data/weather_imputed_11stations.rds\")"
  },
  {
    "objectID": "code/Data_preparation_Weather.html#import-cleaned-data",
    "href": "code/Data_preparation_Weather.html#import-cleaned-data",
    "title": "Data Preparation",
    "section": "3.10 Import cleaned data",
    "text": "3.10 Import cleaned data\nThe below code can be used to import the cleaned data.\n\nweather_data &lt;- read_rds(\"../data/weather_imputed_11stations.rds\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AirWeather Analytics",
    "section": "",
    "text": "In Singapore, while there has been significant research on climate change, the relationship between changing weather patterns and air quality has not been thoroughly explored. While The National Environment Agency in Singapore has made historical weather and air quality data accessible, there remains a shortage of user-friendly tools to effectively visualize and analyze this data for a deeper understanding of its implications. Exploring these datasets within a visual analytics environment can provide valuable insights for various users, from policymakers to the general public.\nAt present, there are few or limited visualization tools available to explore Singapore’s historical weather and air quality data. The few tools available are constrained by static displays and limited analytical depth, and do not capture the complex temporal and spatial nature of the data. They also lack of interactivity or advanced analytical functions, and are unable to explore the relationship between air pollutants and weather parameters.\nTo address this gap, we will attempt to develop an interactive R Shiny application tailored for the exploration of Singapore’s historical weather and air quality data.\nRead our proposal here."
  }
]